public class Solution
{
//FIND THE BREAKPOINT OF DECREASING VALUE
public void nextPermutation(int[] nums) {
  int i = nums.length - 2;
  while (i >= 0 && nums[i] >= nums[i + 1]) {
    i--;
  }

// Find THE NEXT LARGER NUMBER TO SWAP WITH THE BREAKPOINT
if(i >= 0)
{
  int j = nums.length - 1;
  while (j >= 0 && nums[j] <= nums[i]) {
    j--;
  }

  swap(nums, i, j);
}

//ONCE SWAPPED SORT THE i+1 to end elements
Arrays.sort(nums,i+1,nums.length-1);

public void swap(int[] nums, int i, int j) {
  int temp = nums[i];
  nums[i] = nums[j];
  nums[j] = temp;
}

}
}

// Time complexity: O(N) + O(N) + O(N*log N)
// Space complexity: O(1)
